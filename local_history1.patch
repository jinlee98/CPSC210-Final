Index: src/main/ui/AirportSchedule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/ui/AirportSchedule.java	(date 1571375987724)
+++ src/main/ui/AirportSchedule.java	(date 1571375987724)
@@ -1,5 +1,6 @@
 package ui;
 
+import exceptions.AlreadyBookedException;
 import model.*;
 
 import java.io.File;
@@ -62,7 +63,6 @@
     private void urgentDeparture() {
         String plane = "";
         int time;
-        String decision = "";
 
         System.out.println(list.get(1));
 
@@ -77,21 +77,13 @@
         yvrUrgent.confirmScheduledPlane(plane, time);
         p.confirmDeparture();
 
-        System.out.println(list.get(3));
-
-        decision = schedule.next();
-        if (decision.equals("yes")) {
-            urgent();
-        } else {
-            print();
-        }
+        decide();
     }
 
     private void departure() {
 
         String plane = "";
         int time;
-        String decision = "";
 
         System.out.println(list.get(1));
 
@@ -106,6 +98,11 @@
         yvr.confirmScheduledPlane(plane, time);
         p.confirmDeparture();
 
+        decide();
+    }
+
+    private void decide() {
+        String decision = "";
         System.out.println(list.get(3));
 
         decision = schedule.next();
Index: src/main/model/Airport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/model/Airport.java	(date 1571371895428)
+++ src/main/model/Airport.java	(date 1571371895428)
@@ -18,7 +18,7 @@
     // EFFECTS: books the plane into the requested departure slot if it is available,
     //          and lets the plane know the departure time.
 
-    public abstract boolean makeNewDeparture(Plane c, int departureTime);
+    public abstract boolean makeNewDeparture(Plane p, int departureTime);
 
     // EFFECTS: prints out all the departures.  If the time has not been scheduled, prints "available"
     public void print() {
Index: src/main/model/UrgentFlight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/model/UrgentFlight.java	(date 1571373241121)
+++ src/main/model/UrgentFlight.java	(date 1571373241121)
@@ -1,12 +1,22 @@
 package model;
 
+import exceptions.OutsideTimeRangeException;
+
 public class UrgentFlight extends Airport {
 
     @Override
-    public boolean makeNewDeparture(Plane c, int departureTime) {
-        System.out.println("Flight " + c.getName() + " is departing at at " + departureTime);
-        departures.set(departureTime, c);
-        c.setDepartureTime(departureTime);
+    public boolean makeNewDeparture(Plane p, int departureTime) {
+        if (departureTime >= departures.size()) {
+            try {
+                throw new exceptions.OutsideTimeRangeException();
+            } catch (OutsideTimeRangeException e) {
+                System.out.println("That departure time is outside allotted time slots.");
+                return false;
+            }
+        }
+        System.out.println("Flight " + p.getName() + " is departing at at " + departureTime);
+        departures.set(departureTime, p);
+        p.setDepartureTime(departureTime);
         return true;
     }
 }
Index: src/main/model/RegularFlight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/model/RegularFlight.java	(date 1571373864665)
+++ src/main/model/RegularFlight.java	(date 1571373864665)
@@ -1,16 +1,29 @@
 package model;
 
+import exceptions.AlreadyBookedException;
+
 public class RegularFlight extends Airport {
 
     @Override
-    public boolean makeNewDeparture(Plane c, int departureTime) {
+    public boolean makeNewDeparture(Plane p, int departureTime) {
         if (departureTime >= departures.size()) {
-            System.out.println("That departure time is not available.");
-            return true;
+            System.out.println("Time not available");
+            return false;
         }
-        System.out.println("Flight " + c.getName() + " is departing at at " + departureTime);
-        departures.set(departureTime, c);
-        c.setDepartureTime(departureTime);
+
+        if (departures.get(departureTime) != null) {
+            try {
+                throw new AlreadyBookedException();
+            } catch (AlreadyBookedException e) {
+                System.out.println("That departure time is already booked.");
+                return false;
+            } finally {
+                System.out.println("Please try again.");
+            }
+        }
+        System.out.println("Flight " + p.getName() + " is departing at at " + departureTime);
+        departures.set(departureTime, p);
+        p.setDepartureTime(departureTime);
         return true;
     }
 }
Index: src/main/exceptions/AlreadyBookedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/exceptions/AlreadyBookedException.java	(date 1571368544470)
+++ src/main/exceptions/AlreadyBookedException.java	(date 1571368544470)
@@ -0,0 +1,4 @@
+package exceptions;
+
+public class AlreadyBookedException extends Exception {
+}
Index: src/main/exceptions/OutsideTimeRangeException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/exceptions/OutsideTimeRangeException.java	(date 1571368544448)
+++ src/main/exceptions/OutsideTimeRangeException.java	(date 1571368544448)
@@ -0,0 +1,4 @@
+package exceptions;
+
+public class OutsideTimeRangeException extends Exception {
+}
Index: src/main/test/FlightTest.java
===================================================================
--- src/main/test/FlightTest.java	(date 0)
+++ src/main/test/FlightTest.java	(date 0)
@@ -1,116 +0,0 @@
-package test;
-
-import model.Plane;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.Scanner;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public abstract class FlightTest {
-    model.Airport yvr;
-    Plane boeing;
-
-    @Test
-    public void testVerifyForNoPlane() {
-        Plane bad = null;
-        assertFalse(yvr.verifyDeparture(bad, 12));
-    }
-
-    @Test
-    public void testConfirm() {
-        yvr.makeNewDeparture(boeing, 12);
-        assertTrue(yvr.confirmScheduledPlane(boeing.getName(), 12));
-        assertFalse(yvr.confirmScheduledPlane("abc", 14));
-    }
-
-    @Test
-    public void testConfirmDeparture() {
-        boeing.setDepartureTime(12);
-        assertEquals(12, boeing.confirmDeparture());
-    }
-
-    @Test
-    public void testScheduleDepartureAtAvailableTime() {
-        assertTrue(yvr.makeNewDeparture(boeing, 15));
-        assertTrue(yvr.verifyDeparture(boeing, 15));
-    }
-
-    @Test
-    public void scheduleMultipleDeparturesOutOfOrder() {
-
-        Plane boeing10 = new Plane("Boeing 10");
-        boolean boeing10Scheduled = yvr.makeNewDeparture(boeing10, 10);
-        boolean boeing10Verified = yvr.verifyDeparture(boeing10, 10);
-        Plane airbus9 = new Plane("Airbus 9");
-        boolean airbus9Booked = yvr.makeNewDeparture(airbus9, 9);
-        boolean airbus9Verified = yvr.verifyDeparture(airbus9, 9);
-        Plane douglas15 = new Plane("Douglas 15");
-        boolean douglas15Booked = yvr.makeNewDeparture(douglas15, 15);
-        boolean douglas15Verified = yvr.verifyDeparture(douglas15, 15);
-
-        assertTrue(boeing10Scheduled);
-        assertTrue(airbus9Booked);
-        assertTrue(douglas15Booked);
-
-        assertTrue(boeing10Verified);
-        assertTrue(airbus9Verified);
-        assertTrue(douglas15Verified);
-    }
-
-    @Test
-    public void scheduleMultipleDeparturesOutOfOrderRefactored() {
-        Plane boeing10 = new Plane("Boeing 10");
-        Plane airbus9 = new Plane("Airbus 9");
-        Plane douglas15 = new Plane("Douglas 15");
-
-        boolean boeing10Booked = yvr.makeNewDeparture(boeing10, 10);
-        boolean airbus9Booked = yvr.makeNewDeparture(airbus9, 9);
-        boolean douglas15Booked = yvr.makeNewDeparture(douglas15, 15);
-
-        assertTrue(boeing10Booked);
-        assertTrue(airbus9Booked);
-        assertTrue(douglas15Booked);
-
-        boolean boeing10Verified = yvr.verifyDeparture(boeing10, 10);
-        boolean airbus9Verified = yvr.verifyDeparture(airbus9, 9);
-        boolean douglas15Verified = yvr.verifyDeparture(douglas15, 15);
-
-        assertTrue(boeing10Verified);
-        assertTrue(airbus9Verified);
-        assertTrue(douglas15Verified);
-    }
-
-    @Test public void confirmUnscheduledTimeByName() {
-        assertTrue(yvr.makeNewDeparture(boeing, 15));
-        assertTrue(yvr.verifyDeparture(boeing, 15));
-    }
-
-    @Test
-    public void testScheduleDepartureAtTakenTime() {
-        boolean madeDeparture = yvr.makeNewDeparture(boeing, 15);
-        assertTrue(madeDeparture);
-        assertTrue(yvr.verifyDeparture(boeing, 15));
-
-        Plane p = new Plane("Just a Plane");
-        assertTrue(yvr.makeNewDeparture(p, 15));
-
-        assertTrue(yvr.verifyDeparture(p, 15));
-        assertFalse(yvr.verifyDeparture(boeing, 15));
-    }
-
-    @Test
-    public void testEarliestDeparture() {
-        assertTrue(yvr.makeNewDeparture(boeing, 5));
-        assertTrue(yvr.verifyDeparture(boeing, 5));
-    }
-
-    @Test
-    public void testLatestDeparture() {
-        assertTrue(yvr.makeNewDeparture(boeing, 23));
-        assertTrue(yvr.verifyDeparture(boeing, 23));
-    }
-}
Index: src/main/test/UrgentFlightTest.java
===================================================================
--- src/main/test/UrgentFlightTest.java	(date 0)
+++ src/main/test/UrgentFlightTest.java	(date 0)
@@ -1,28 +0,0 @@
-package test;
-
-import model.Plane;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public class UrgentFlightTest extends FlightTest {
-    model.Airport yvrUrgent;
-    Plane delta;
-
-    @BeforeEach
-    public void setUp() {
-        yvr = new model.RegularFlight();
-        yvrUrgent = new model.UrgentFlight();
-        boeing = new Plane("Boeing");
-        delta = new Plane("delta");
-    }
-
-
-    @Test
-    public void testUrgentOverRegular() {
-        yvr.makeNewDeparture(delta, 15);
-        assertTrue(yvrUrgent.makeNewDeparture(boeing, 15));
-        assertTrue(yvrUrgent.verifyDeparture(boeing, 15));
-    }
-}
\ No newline at end of file
Index: src/main/test/RegularFlightTest.java
===================================================================
--- src/main/test/RegularFlightTest.java	(date 0)
+++ src/main/test/RegularFlightTest.java	(date 0)
@@ -1,23 +0,0 @@
-package test;
-
-import model.Plane;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-public class RegularFlightTest extends FlightTest {
-
-    @BeforeEach
-    public void setUp() {
-        yvr = new model.RegularFlight();
-        boeing = new Plane("Boeing");
-    }
-
-    @Test
-    public void testUnavailable() {
-        assertTrue(yvr.makeNewDeparture(boeing, 1200));
-
-    }
-
-}
\ No newline at end of file
Index: src/test/ui/MainTest.java
===================================================================
--- src/test/ui/MainTest.java	(date 0)
+++ src/test/ui/MainTest.java	(date 0)
@@ -1,5 +0,0 @@
-package ui;
-
-class MainTest {
-
-}
\ No newline at end of file
Index: src/test/model/FlightTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/model/FlightTest.java	(date 1571372580604)
+++ src/test/model/FlightTest.java	(date 1571372580604)
@@ -0,0 +1,104 @@
+package model;
+
+import model.Plane;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public abstract class FlightTest {
+    model.Airport yvr;
+    Plane boeing;
+
+    @Test
+    public void testVerifyForNoPlane() {
+        Plane bad = null;
+        assertFalse(yvr.verifyDeparture(bad, 12));
+    }
+
+    @Test
+    public void testConfirm() {
+        yvr.makeNewDeparture(boeing, 12);
+        assertTrue(yvr.confirmScheduledPlane(boeing.getName(), 12));
+        assertFalse(yvr.confirmScheduledPlane("abc", 14));
+    }
+
+    @Test
+    public void testScheduleDepartureAtAvailableTime() {
+        assertTrue(yvr.makeNewDeparture(boeing, 15));
+        assertTrue(yvr.verifyDeparture(boeing, 15));
+    }
+
+    @Test
+    public void scheduleMultipleDeparturesOutOfOrder() {
+
+        Plane boeing10 = new Plane("Boeing 10");
+        boolean boeing10Scheduled = yvr.makeNewDeparture(boeing10, 10);
+        boolean boeing10Verified = yvr.verifyDeparture(boeing10, 10);
+        Plane airbus9 = new Plane("Airbus 9");
+        boolean airbus9Booked = yvr.makeNewDeparture(airbus9, 9);
+        boolean airbus9Verified = yvr.verifyDeparture(airbus9, 9);
+        Plane douglas15 = new Plane("Douglas 15");
+        boolean douglas15Booked = yvr.makeNewDeparture(douglas15, 15);
+        boolean douglas15Verified = yvr.verifyDeparture(douglas15, 15);
+
+        assertTrue(boeing10Scheduled);
+        assertTrue(airbus9Booked);
+        assertTrue(douglas15Booked);
+
+        assertTrue(boeing10Verified);
+        assertTrue(airbus9Verified);
+        assertTrue(douglas15Verified);
+    }
+
+    @Test
+    public void scheduleMultipleDeparturesOutOfOrderRefactored() {
+        Plane boeing10 = new Plane("Boeing 10");
+        Plane airbus9 = new Plane("Airbus 9");
+        Plane douglas15 = new Plane("Douglas 15");
+
+        boolean boeing10Booked = yvr.makeNewDeparture(boeing10, 10);
+        boolean airbus9Booked = yvr.makeNewDeparture(airbus9, 9);
+        boolean douglas15Booked = yvr.makeNewDeparture(douglas15, 15);
+
+        assertTrue(boeing10Booked);
+        assertTrue(airbus9Booked);
+        assertTrue(douglas15Booked);
+
+        boolean boeing10Verified = yvr.verifyDeparture(boeing10, 10);
+        boolean airbus9Verified = yvr.verifyDeparture(airbus9, 9);
+        boolean douglas15Verified = yvr.verifyDeparture(douglas15, 15);
+
+        assertTrue(boeing10Verified);
+        assertTrue(airbus9Verified);
+        assertTrue(douglas15Verified);
+    }
+
+    @Test public void confirmUnscheduledTimeByName() {
+        assertTrue(yvr.makeNewDeparture(boeing, 15));
+        assertTrue(yvr.verifyDeparture(boeing, 15));
+    }
+
+    @Test
+    public void testScheduleDepartureAtTakenTime() {
+        boolean madeDeparture = yvr.makeNewDeparture(boeing, 15);
+        assertTrue(madeDeparture);
+        assertTrue(yvr.verifyDeparture(boeing, 15));
+
+        Plane p = new Plane("Just a Plane");
+        assertTrue(yvr.makeNewDeparture(p, 12));
+        assertTrue(yvr.verifyDeparture(p, 12));
+        assertFalse(yvr.verifyDeparture(boeing, 12));
+    }
+
+    @Test
+    public void testEarliestDeparture() {
+        assertTrue(yvr.makeNewDeparture(boeing, 5));
+        assertTrue(yvr.verifyDeparture(boeing, 5));
+    }
+
+    @Test
+    public void testLatestDeparture() {
+        assertTrue(yvr.makeNewDeparture(boeing, 23));
+        assertTrue(yvr.verifyDeparture(boeing, 23));
+    }
+}
Index: src/test/model/UrgentFlightTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/model/UrgentFlightTest.java	(date 1571371495201)
+++ src/test/model/UrgentFlightTest.java	(date 1571371495201)
@@ -0,0 +1,33 @@
+package model;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public class UrgentFlightTest extends FlightTest {
+    model.Airport yvrUrgent;
+    Plane delta;
+
+    @BeforeEach
+    public void setUp() {
+        yvr = new model.RegularFlight();
+        yvrUrgent = new model.UrgentFlight();
+        boeing = new Plane("Boeing");
+        delta = new Plane("delta");
+    }
+
+
+    @Test
+    public void testUrgentOverRegular() {
+        yvr.makeNewDeparture(delta, 15);
+        assertTrue(yvrUrgent.makeNewDeparture(boeing, 15));
+        assertTrue(yvrUrgent.verifyDeparture(boeing, 15));
+    }
+
+    @Test
+    public void testOutsideTime() {
+        assertFalse(yvrUrgent.makeNewDeparture(boeing, 9999));
+    }
+}
\ No newline at end of file
Index: src/test/model/RegularFlightTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/model/RegularFlightTest.java	(date 1571371406017)
+++ src/test/model/RegularFlightTest.java	(date 1571371406017)
@@ -0,0 +1,28 @@
+package model;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class RegularFlightTest extends FlightTest {
+
+    @BeforeEach
+    public void setUp() {
+        yvr = new model.RegularFlight();
+        boeing = new Plane("Boeing");
+    }
+
+    @Test
+    public void testUnavailable() {
+        assertFalse(yvr.makeNewDeparture(boeing, 1200));
+    }
+
+    @Test
+    public void testAlreadyBookedException() {
+        Plane delta = new Plane("Delta");
+        yvr.makeNewDeparture(delta, 12);
+        assertFalse(yvr.makeNewDeparture(boeing, 12));
+        }
+
+}
\ No newline at end of file
Index: data/pa.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data/pa.txt	(date 1571375864123)
+++ data/pa.txt	(date 1571375864123)
@@ -0,0 +1,5 @@
+-------Welcome to YVR scheduling! Is this an urgent or regular booking?-------
+--------------------------Please enter a plane name.--------------------------
+---------------------------Enter departure time.------------------------------
+----------------------Book another plane? Yes or no.--------------------------
+------------------------------Departures list:--------------------------------
Index: .idea/dictionaries/Jin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dictionaries/Jin.xml	(date 1571370016697)
+++ .idea/dictionaries/Jin.xml	(date 1571370016697)
@@ -0,0 +1,7 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="Jin">
+    <words>
+      <w>timeslot</w>
+    </words>
+  </dictionary>
+</component>
\ No newline at end of file
Index: pa.txt
===================================================================
--- pa.txt	(date 0)
+++ pa.txt	(date 0)
@@ -1,5 +0,0 @@
--------Welcome to YVR scheduling! Is this an urgent or regular booking?-------
---------------------------Please enter a plane name.--------------------------
----------------------------Enter departure time.------------------------------
-----------------------Book another plane? Yes or no.--------------------------
-------------------------------Departures list:--------------------------------
